type Query {
	apiVersion: String!
	user(id: UUID!): User!
}
scalar UUID
type User {
	id: UUID!
	kind: UserKind!
	nickname: String!
	createdAt: DateTime!
	"""
	Email addr. Not fetchable by other users.
	"""
	email: String!
	"""
	Cards owned by the user.
	"""
	cards(sort: CardSort, after: String, before: String, first: Int, last: Int): CardConnection!
}
enum UserKind {
	SUPER
	NORMAL
}
"""
Implement the DateTime<Utc> scalar

The input/output is a string in RFC3339 format.
"""
scalar DateTime
enum CardSort {
	OWNED_AT
	RATING
}
type CardConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [CardEdge]
}
"""
Information about pagination in a connection
"""
type PageInfo {
	"""
	When paginating backwards, are there more items?
	"""
	hasPreviousPage: Boolean!
	"""
	When paginating forwards, are there more items?
	"""
	hasNextPage: Boolean!
	"""
	When paginating backwards, the cursor to continue.
	"""
	startCursor: String
	"""
	When paginating forwards, the cursor to continue.
	"""
	endCursor: String
}
"""
An edge in a connection.
"""
type CardEdge {
	"""
	The item at the end of the edge
	"""
	node: Card!
	"""
	A cursor for use in pagination
	"""
	cursor: String!
}
type Card {
	id: UUID!
	rating: Float!
	ownedAt: DateTime!
	createdAt: DateTime!
	ownerId: UUID
}
type Mutation {
	register(email: String!, password: String!, nickname: String!): UUID!
	login(email: String!, password: String!): UUID!
}
schema {
	query: Query
	mutation: Mutation
}
